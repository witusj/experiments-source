def get_neighborhood(x, v_star, ids):
x = np.array(x)
p = 50
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {x}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids):
x = np.array(x)
p = 50
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
def local_search(x, v_star, regressor, size=2):
# Initialize the best solution found so far 'x_star' to the input vector 'x'
x_star = np.array(x).flatten()  # Keep as 1D array
# Initialize the best cost found so far 'C_star' to the cost of the input vector 'x'
x_star_dmatrix = xgb.DMatrix(x_star.reshape(1, -1))
C_star = regressor.predict(x_star_dmatrix)[0]
# Set the value of 'T' to the length of the input vector 'x'
T = len(x_star)
# Loop over all possible values of 't'
for t in range(1, size):
print(f'Running local search {t}')
# Generate the neighborhood of the current best solution 'x_star'
ids = powerset(range(T), t)
neighborhood = get_neighborhood(x_star, v_star, ids)
for neighbor in neighborhood:
neighbor_dmatrix = xgb.DMatrix(neighbor.reshape(1, -1))
cost = regressor.predict(neighbor_dmatrix)
if cost < C_star:
x_star = neighbor
C_star = cost
result = [int(x) for x in neighbor]
objectives = calculate_objective(result, s, d, q)
objective_values = w * objectives[0] + (1 - w) * objectives[1]
print(f"Found better solution: {x_star}, pred_cost: {C_star}, real_cost: {objective_values}")
# Return the best solution found 'x_star' as 1D array
return x_star, C_star
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")
test = local_search(x, v_star, regressor, 10)
N = 12 # Number of patients
T = 18 # Number of intervals
d = 5 # Length of each interval
s = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution
q = 0.20 # Probability of a scheduled patient not showing up
w = 0.8 # Weight for the waiting time in objective function
num_schedules = 20000 # Number of schedules to sample
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")
test = local_search(x, v_star, regressor, 10)
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, print = True):
x = np.array(x)
p = 50
if print: print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
if print: print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if print: print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if print: print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if print: print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, print = True):
x = np.array(x)
p = 50
if print: print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
if print: print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if print: print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if print: print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if print: print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids, print=True)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, pr = True):
x = np.array(x)
p = 50
if pr=True: print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
if pr=True: print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if pr=True: print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if pr=True: print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if pr=True: print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids, print=True)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, pr = True):
x = np.array(x)
p = 50
if pr=True: print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if pr=True: print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if pr=True: print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if pr=True: print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids, print=True)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, print = True):
x = np.array(x)
p = 50
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids):
x = np.array(x)
p = 50
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if i%p==0: print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, verbose=False):
x = np.array(x)
p = 50
if verbose:
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if verbose:
print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
if verbose:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if verbose:
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if verbose:
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if verbose:
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
import numpy as np
from itertools import chain, combinations
import sys
from math import comb  # Available in Python 3.8 and later
import xgboost as xgb
from functions import calculate_objective
import pickle
N = 12 # Number of patients
T = 18 # Number of intervals
d = 5 # Length of each interval
s = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution
q = 0.20 # Probability of a scheduled patient not showing up
w = 0.8 # Weight for the waiting time in objective function
num_schedules = 20000 # Number of schedules to sample
# Load the best solution from the training dataset
with open('neighbors_and_objectives.pkl', 'rb') as f:
data = pickle.load(f)
print(f"The data has following keys: {[key for key in data.keys()]}")
# Step 1: Flatten the objectives into a 1D array
flattened_data = [value for sublist in data['objectives'] for value in sublist]
# Step 2: Find the index of the minimum value
min_index = np.argmin(flattened_data)
# Step 3: Convert that index back to the original 2D structure
row_index = min_index // 2  # Assuming each inner list has 2 values
col_index = min_index % 2
print(f"The minimum objective value is at index [{row_index}][{col_index}].\nThis is schedule: {data['neighbors_list'][row_index][col_index]} with objective value {data['objectives'][row_index][col_index]}.")
# Set the initial schedule to the best solution from the training dataset
initial_schedule = data['neighbors_list'][row_index][col_index]
T = len(initial_schedule)
def get_v_star(t):
# Create an initial vector 'u' of zeros with length 't'
u = np.zeros(t, dtype=int)
# Set the first element of vector 'u' to -1
u[0] = -1
# Set the last element of vector 'u' to 1
u[-1] = 1
# Initialize the list 'v_star' with the initial vector 'u'
v_star = [u]
# Loop over the length of 'u' minus one times
for i in range(len(u) - 1):
# Append the last element of 'u' to the front of 'u'
u = np.append(u[-1], u)
# Remove the last element of 'u' to maintain the same length
u = np.delete(u, -1)
# Append the updated vector 'u' to the list 'v_star'
v_star.append(u)
# Convert the list of vectors 'v_star' into a NumPy array and return it
return(np.array(v_star))
# Example of function call:
# This will create a 4x4 matrix where each row is a cyclically shifted version of the first row
get_v_star(4)
def powerset(iterable, size=1):
"powerset([1,2,3], 2) --> (1,2) (1,3) (2,3)"
return [[i for i in item] for item in combinations(iterable, size)]
x = initial_schedule
# Generate a matrix 'v_star' using the 'get_v_star' function
v_star = get_v_star(T)
# Generate all possible non-empty subsets (powerset) of the set {0, 1, 2, ..., t-1}
# 'ids' will be a list of tuples, where each tuple is a subset of indices
size = 2
ids = powerset(range(T), size)
len(ids)
ids[:T]
v_star = get_v_star(T)
def get_neighborhood(x, v_star, ids, verbose=False):
x = np.array(x)
p = 50
if verbose:
print(f"Printing every {p}th result")
# Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
neighborhood = []
# Loop over all possible non-empty subsets of indices
for i in range(len(ids)):
# Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
neighbor = np.zeros(len(x), dtype=int)
# Loop over all indices in 'ids[i]'
for j in range(len(ids[i])):
if verbose:
print(f"v_star{[ids[i][j]]}: {v_star[ids[i][j]]}")
# Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
neighbor += v_star[ids[i][j]]
# Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
x_n = x + neighbor
if i%p==0:
if verbose:
print(f"x, x', delta:\n{x},\n{x_n},\n{neighbor}\n----------------- ")
neighborhood.append(x_n)
# Convert the list 'neighborhood' into a NumPy array
neighborhood = np.array(neighborhood)
if verbose:
print(f"Size of raw neighborhood: {len(neighborhood)}")
# Create a mask for rows with negative values
mask = ~np.any(neighborhood < 0, axis=1)
# Filter out rows with negative values using the mask
if verbose:
print(f"filtered out: {len(neighborhood)-mask.sum()} schedules with negative values.")
filtered_neighborhood = neighborhood[mask]
if verbose:
print(f"Size of filtered neighborhood: {len(filtered_neighborhood)}")
return filtered_neighborhood
# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched:\n x = {np.array(x)}: \n {test_nh}")
def local_search(x, v_star, regressor, size=2):
# Initialize the best solution found so far 'x_star' to the input vector 'x'
x_star = np.array(x).flatten()  # Keep as 1D array
# Initialize the best cost found so far 'C_star' to the cost of the input vector 'x'
x_star_dmatrix = xgb.DMatrix(x_star.reshape(1, -1))
C_star = regressor.predict(x_star_dmatrix)[0]
# Set the value of 'T' to the length of the input vector 'x'
T = len(x_star)
# Loop over all possible values of 't'
for t in range(1, size):
print(f'Running local search {t}')
# Generate the neighborhood of the current best solution 'x_star'
ids = powerset(range(T), t)
neighborhood = get_neighborhood(x_star, v_star, ids)
for neighbor in neighborhood:
neighbor_dmatrix = xgb.DMatrix(neighbor.reshape(1, -1))
cost = regressor.predict(neighbor_dmatrix)
if cost < C_star:
x_star = neighbor
C_star = cost
result = [int(x) for x in neighbor]
objectives = calculate_objective(result, s, d, q)
objective_values = w * objectives[0] + (1 - w) * objectives[1]
print(f"Found better solution: {x_star}, pred_cost: {C_star}, real_cost: {objective_values}")
# Return the best solution found 'x_star' as 1D array
return x_star, C_star
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")
test = local_search(x, v_star, regressor, 10)
print(f"Best solution found: {test[0]}, with cost: {test[1]}")
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")
test = local_search(x, v_star, regressor, 12)
print(f"Best solution found: {test[0]}, with cost: {test[1]}")
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")
test = local_search(x, v_star, regressor, T)
print(f"Best solution found: {test[0]}, with cost: {test[1]}")
reticulate::repl_python()
