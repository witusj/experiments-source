---
title: "Local search with regressor model"
author: "Witek ten Hove"
jupyter: python3
---



```{python}
import numpy as np
from itertools import chain, combinations
import sys
from math import comb  # Available in Python 3.8 and later
import xgboost as xgb
from functions import calculate_objective
```

```{python}
N = 12 # Number of patients
T = 18 # Number of intervals
d = 5 # Length of each interval
s = [0.0, 0.27, 0.28, 0.2, 0.15, 0.1] # Service times distribution
q = 0.20 # Probability of a scheduled patient not showing up
w = 0.8 # Weight for the waiting time in objective function
num_schedules = 20000 # Number of schedules to sample
```

Local search algorithm:

1.  Start with the best solution found so far $\{x^*, C(x^*)\}$ from the training set.

2.  Set $T$ to the length of the vector $x^*$.

3.  Define the vectors $V^*$ as follows:

    $$
    \left\{
    \begin{array}{c}
    \vec{v_1}, \\
    \vec{v_2}, \\
    \vec{v_3}, \\
    \vdots \\
    \vec{v_{T-1}}, \\
    \vec{v_T} \\
    \end{array}
    \right\} = 
    \left\{
    \begin{array}{c}
    (-1, 0,...., 0, 1), \\
    (1, -1, 0,...., 0), \\
    (0, 1, -1,...., 0), \\
    \vdots \\
    (0,...., 1, -1, 0), \\
    (0,...., 0, 1, -1) \\
    \end{array}
    \right\}
    $$

4.  Define the vectors $U_t$ as all possible non-empty subsets of the set $V^*$ such that $|U_t| = t$, $t \in \{1,2, \dots,T\}$.

5.  Define the neighborhood of $x$ as all vectors of the form $x + u_{t1}+\dots+u_{tk}$ with $u_{t1},\dots,u_{tk} \in U_t$.

6.  Set $t = 1$.

7.  Generate the neighborhood of $x^*$. For each vector $y$ in the neighborhood of $x^*$:

    a.  Predict $C(y)$.
    b.  If $C(y) < C(x^*)$, set $x^* = y$ and go to 7.

8.  If $t \leq T$, set $t = t + 1$ and go to 7.

9.  Return $x^*$.

## 3 Define the vectors $V^*$

```{python}
def get_v_star(t):
    # Create an initial vector 'u' of zeros with length 't'
    u = np.zeros(t)
    # Set the first element of vector 'u' to -1
    u[0] = -1
    # Set the last element of vector 'u' to 1
    u[-1] = 1
    # Initialize the list 'v_star' with the initial vector 'u'
    v_star = [u]
    # Loop over the length of 'u' minus one times
    for i in range(len(u) - 1):
        # Append the last element of 'u' to the front of 'u'
        u = np.append(u[-1], u)
        # Remove the last element of 'u' to maintain the same length
        u = np.delete(u, -1)
        # Append the updated vector 'u' to the list 'v_star'
        v_star.append(u)
    # Convert the list of vectors 'v_star' into a NumPy array and return it
    return(np.array(v_star))

# Example of function call:
# This will create a 4x4 matrix where each row is a cyclically shifted version of the first row
get_v_star(4)
```

## 4 - Define the vectors $U_t$

```{python}
def powerset(iterable, size=1):
    "powerset([1,2,3], 2) --> (1,2) (1,3) (2,3)"
    return [[i for i in item] for item in combinations(iterable, size)]
  
x = [5, 0, 0, 3, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
# Set the value of 't'
t = len(x)

# Generate a matrix 'v_star' using the 'get_v_star' function
v_star = get_v_star(t)

# Generate all possible non-empty subsets (powerset) of the set {0, 1, 2, ..., t-1}
# 'ids' will be a list of tuples, where each tuple is a subset of indices
size = 2
ids = powerset(range(t), size)
len(ids)
ids[:t]
```

## 5 - Define the neighborhood of $x$

```{python}
v_star = get_v_star(len(x))

def get_neighborhood(x, v_star, ids):
    # Initialize the list 'neighborhood' to store the vectors in the neighborhood of 'x'
    neighborhood = []
    # Loop over all possible non-empty subsets of indices
    for i in range(len(ids)):
        # Initialize the vector 'neighbor' to store the sum of vectors in 'v_star' corresponding to the indices in 'ids[i]'
        neighbor = np.zeros(len(x))
        # Loop over all indices in 'ids[i]'
        for j in range(len(ids[i])):
            print(f"{v_star[ids[i][j]]}")
            # Add the vector in 'v_star' corresponding to the index 'ids[i][j]' to 'neighbor'
            neighbor += v_star[ids[i][j]]
        # Append the vector 'x' plus 'neighbor' to the list 'neighborhood'
        print(f"{x},\n{neighbor}")
        neighborhood.append(x + neighbor)
    
    # Convert the list 'neighborhood' into a NumPy array
    neighborhood = np.array(neighborhood)
    print(len(neighborhood))
    # Create a mask for rows with negative values
    mask = ~np.any(neighborhood < 0, axis=1)
    print(mask.sum())
    # Filter out rows with negative values using the mask
    filtered_neighborhood = neighborhood[mask]
    print(len(filtered_neighborhood))
    return filtered_neighborhood

# Example of function call:
# This will generate the neighborhood of the vector 'x' using the vectors in 'v_star' and the indices in 'ids'
test_nh = get_neighborhood(x, v_star, ids)
print(f"All neighborhoods with {size} patients switched of\n x = {x}: \n {test_nh}")
```

## 6 - Local search algorithm

```{python}
def local_search(x, v_star, regressor, size=2):
    # Initialize the best solution found so far 'x_star' to the input vector 'x'
    x_star = np.array(x).flatten()  # Keep as 1D array

    # Initialize the best cost found so far 'C_star' to the cost of the input vector 'x'
    x_star_dmatrix = xgb.DMatrix(x_star.reshape(1, -1))
    C_star = regressor.predict(x_star_dmatrix)[0]

    # Set the value of 'T' to the length of the input vector 'x'
    T = len(x_star)

    # Loop over all possible values of 't'
    for t in range(1, size):
        print(f'Running local search {t}')

        # Generate the neighborhood of the current best solution 'x_star'
        ids = powerset(range(T), t)
        neighborhood = get_neighborhood(x_star, v_star, ids)
        
        for neighbor in neighborhood:
            neighbor_dmatrix = xgb.DMatrix(neighbor.reshape(1, -1))
            cost = regressor.predict(neighbor_dmatrix)
            if cost < C_star:
                x_star = neighbor
                C_star = cost
                result = [int(x) for x in neighbor]
                objectives = calculate_objective(result, s, d, q)
                objective_values = w * objectives[0] + (1 - w) * objectives[1]
                print(f"Found better solution: {x_star}, pred_cost: {C_star}, real_cost: {objective_values}")

    # Return the best solution found 'x_star' as 1D array
    return x_star, C_star
```

## 7 - Example of using the local search algorithm

```{python}
# Example of using the local search algorithm with a random vector 'x' and a regressor model
# Load regressor model
regressor = xgb.Booster()
regressor.load_model("models/regressor.json")

test = local_search(x, v_star, regressor, 10)
```
