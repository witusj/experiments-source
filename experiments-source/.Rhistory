import numpy as np
from functions_new import service_time_with_no_shows, compute_convolutions, compute_convolutions_fft, calculate_objective_serv_time_lookup
# Parameters
d = 5
q = 0.2
# Create service time distribution
service_time = np.zeros(11)
service_time[3] = 0.2
service_time[5] = 0.6
service_time[8] = 0.2
average_service_time = np.dot(range(len(service_time)), service_time)
print(f"Average service time: {average_service_time}")
# Different schedule patterns with the same total number of patients (8)
schedules = [
("Uniform", [2, 2, 2, 2]),
("Decreasing", [5, 2, 1, 0]),
("Increasing", [0, 1, 2, 5]),
("Front-heavy", [4, 4, 0, 0]),
("Back-heavy", [0, 0, 4, 4]),
("Alternating", [4, 0, 4, 0]),
("Bailey-rule", [2, 1, 1, 1, 1, 1, 1])  # Schedule 2 initially, then 1 each slot
]
# Set number of simulations for Monte Carlo simulation
nr_simulations = 3
# Create dictionary for storing results
results = {}
# Adjust service time distribution for no-shows and compare to original
service_time_no_shows = service_time_with_no_shows(service_time, q)
print(f"Service time distribution with no-shows: {service_time_no_shows}")
# Loop through the schedules
for schedule_name, schedule in schedules:
N = sum(schedule)
T = len(schedule)
print(f"Schedule: {schedule_name} {schedule}, N: {N}, T: {T}")
# Monte Carlo simulation
avg_waiting_time = 0
cum_waiting_time = 0
avg_overtime = 0
for _ in range(nr_simulations):
print(f"Simulation {_}")
# Generate random service times
sampled_service_times = np.random.choice(range(len(service_time_no_shows)), schedule[0], p=service_time_no_shows)
print(f"Sampled service times: {sampled_service_times}")
# Start Lindley recursion. In the first time slot the spillover time is 0 and the waiting time is the cumulative sum of the service times of the all but the last patient in the first time slot. Special cases are when there are no patients in the first time slot or just one patient.
if schedule[0] == 0:
waiting_time = 0
spillover_time = 0
elif schedule[0] == 1:
waiting_time = 0
spillover_time = max(0, sampled_service_times[0])
else:
waiting_time = sum(np.cumsum(sampled_service_times[:schedule[0] - 1])) # Cumulative sum of the service times of all but the last scheduled patients in the interval
spillover_time = max(0, sum(sampled_service_times) - d)
print(f"Initial waiting time: {waiting_time}, spillover time: {spillover_time}")
cum_waiting_time += waiting_time
# Loop over the remaining time slots and calculate the waiting time and spillover time for each time slot.
for t in range(1, T):
# Calculate service times for the patients in the current time slot
sampled_service_times = np.random.choice(range(len(service_time_no_shows)), schedule[t], p=service_time_no_shows)
print(f"Sampled service times: {sampled_service_times}")
# Calculate waiting time and spillover time for the current time slot
if schedule[t] == 0:
waiting_time = 0
spillover_time = max(0, spillover_time - d)
elif schedule[t] == 1:
waiting_time = spillover_time
spillover_time = max(0, spillover_time + sampled_service_times[0] - d)
else:
waiting_time = spillover_time + sum(np.cumsum(sampled_service_times[:schedule[0] - 1])) # Cumulative sum of the service times of all but the last scheduled patients in the interval
spillover_time = max(0, spillover_time + sum(sampled_service_times) - d)
print(f"Time slot {t}: waiting time: {waiting_time}, spillover time: {spillover_time}")
cum_waiting_time += waiting_time
avg_waiting_time += cum_waiting_time / N
avg_overtime += max(0, spillover_time - d)
avg_waiting_time /= nr_simulations
avg_overtime /= nr_simulations
print(f"Average waiting time: {avg_waiting_time}, average overtime: {avg_overtime}")
results[schedule_name] = {'simulation': {'Average waiting time' : avg_waiting_time, 'Average overtime' : avg_overtime}}
print(results)
# Loop through the schedules, run 10 evaluations, calculate average waiting time and overtime for each schedule, calculate average computation times and store the results in the results dictionary
for schedule_name, schedule in schedules:
N = sum(schedule)
T = len(schedule)
print(f"Schedule: {schedule_name} {schedule}, N: {N}, T: {T}")
convolutions = compute_convolutions(service_time, N, q)
# Exact calculation
for _ in range(10):
print(f"Evaluation {_}")
# Calculate the objective value using the exact method
waiting_time, overtime = calculate_objective_serv_time_lookup(schedule, d, convolutions)
print(f"Expected waiting time: {waiting_time}, Expected overtime: {overtime}")
results[schedule_name]['exact'] = {'Expected waiting time': {waiting_time}, 'Expected overtime': {overtime}}
import numpy as np
import time
import plotly.graph_objects as go
from functions_new import service_time_with_no_shows, compute_convolutions, compute_convolutions_fft, calculate_objective_serv_time_lookup
# Parameters
d = 5
q = 0.1
# Create service time distribution
service_time = np.zeros(11)
service_time[3] = 0.2
service_time[5] = 0.6
service_time[8] = 0.2
average_service_time = np.dot(range(len(service_time)), service_time)
print(f"Average service time: {average_service_time}")
# Different schedule patterns with the same total number of patients (8)
schedules = [
("Uniform", [2, 2, 2, 2]),
("Decreasing", [5, 2, 1, 0]),
("Increasing", [0, 1, 2, 5]),
("Front-heavy", [4, 4, 0, 0]),
("Back-heavy", [0, 0, 4, 4]),
("Alternating", [4, 0, 4, 0]),
("Bailey-rule", [2, 1, 1, 1, 1, 1, 1])  # Schedule 2 initially, then 1 each slot
]
# Set number of simulations for Monte Carlo simulation
nr_simulations = 10000
# Create dictionary for storing results
results = {}
# Adjust service time distribution for no-shows and compare to original
service_time_no_shows = service_time_with_no_shows(service_time, q)
print(f"Service time distribution with no-shows: {service_time_no_shows}")
# Loop through the schedules
for schedule_name, schedule in schedules:
N = sum(schedule)
T = len(schedule)
print(f"Schedule: {schedule_name} {schedule}, N: {N}, T: {T}")
# Monte Carlo simulation
total_waiting_time = 0
total_overtime = 0
for _ in range(nr_simulations):
cum_waiting_time = 0
# print(f"Simulation {_}")
# Generate random service times
sampled_service_times = np.random.choice(range(len(service_time_no_shows)), schedule[0], p=service_time_no_shows)
# print(f"Sampled service times: {sampled_service_times}")
# Start Lindley recursion. In the first time slot the spillover time is 0 and the waiting time is the cumulative sum of the service times of the all but the last patient in the first time slot. Special cases are when there are no patients in the first time slot or just one patient.
if schedule[0] == 0:
waiting_time = 0
spillover_time = 0
elif schedule[0] == 1:
waiting_time = 0
spillover_time = max(0, sampled_service_times[0])
else:
waiting_time = sum(np.cumsum(sampled_service_times[:schedule[0] - 1])) # Cumulative sum of the service times of all but the last scheduled patients in the interval
spillover_time = max(0, sum(sampled_service_times) - d)
# print(f"Initial waiting time: {waiting_time}, spillover time: {spillover_time}")
cum_waiting_time += waiting_time
# Loop over the remaining time slots and calculate the waiting time and spillover time for each time slot.
for t in range(1, T):
# Calculate service times for the patients in the current time slot
sampled_service_times = np.random.choice(range(len(service_time_no_shows)), schedule[t], p=service_time_no_shows)
# print(f"Sampled service times: {sampled_service_times}")
# Calculate waiting time and spillover time for the current time slot
if schedule[t] == 0:
waiting_time = 0
spillover_time = max(0, spillover_time - d)
elif schedule[t] == 1:
waiting_time = spillover_time
spillover_time = max(0, spillover_time + sampled_service_times[0] - d)
else:
waiting_time = spillover_time + sum(np.cumsum(sampled_service_times[:schedule[t] - 1])) # Cumulative sum of the service times of all but the last scheduled patients in the interval
spillover_time = max(0, spillover_time + sum(sampled_service_times) - d)
# print(f"Time slot {t}: waiting time: {waiting_time}, spillover time: {spillover_time}")
cum_waiting_time += waiting_time
total_waiting_time += cum_waiting_time / N
total_overtime += max(0, spillover_time - d)
avg_waiting_time = total_waiting_time / nr_simulations
avg_overtime = total_overtime / nr_simulations
print(f"Average waiting time: {avg_waiting_time}, average overtime: {avg_overtime}")
results[schedule_name] = {'simulation': {'Average waiting time' : avg_waiting_time, 'Average overtime' : avg_overtime}}
print(results)
# Loop through the schedules, run 10 evaluations, calculate average waiting time and overtime for each schedule, calculate average computation times and store the results in the results dictionary
for schedule_name, schedule in schedules:
N = sum(schedule)
T = len(schedule)
print(f"Schedule: {schedule_name} {schedule}, N: {N}, T: {T}")
convolutions = compute_convolutions(service_time, N, q)
total_time = 0
# Exact calculation over 10 evaluations
for i in range(10):
print(f"Evaluation {i}")
start_time = time.time()
# Calculate the objective value using the exact method
waiting_time, overtime = calculate_objective_serv_time_lookup(schedule, d, convolutions)
elapsed_time = time.time() - start_time
total_time += elapsed_time
avg_time = total_time / 10
print(f"Expected waiting time: {waiting_time}, Expected overtime: {overtime}")
results[schedule_name]['exact'] = {
'Expected waiting time': waiting_time / N,
'Expected overtime': overtime,
'Average computation time': avg_time
}
print(results)
# Extract schedule names and corresponding values
schedule_names = list(results.keys())
sim_wait = [results[s]['simulation']['Average waiting time'] for s in schedule_names]
sim_over = [results[s]['simulation']['Average overtime'] for s in schedule_names]
exact_wait = [results[s]['exact']['Expected waiting time'] for s in schedule_names]
exact_over = [results[s]['exact']['Expected overtime'] for s in schedule_names]
# Prepare new x-values for simulation and exact results
x_sim = [f"{s}<br>Simulation" for s in schedule_names]
x_exact = [f"{s}<br>Exact" for s in schedule_names]
# Create the figure
fig = go.Figure()
# Simulation bar traces (stacked)
fig.add_trace(go.Bar(
x=x_sim,
y=sim_wait,
name='Waiting Time',
marker_color='blue'
))
fig.add_trace(go.Bar(
x=x_sim,
y=sim_over,
name='Overtime',
marker_color='red'
))
# Exact bar traces (stacked)
fig.add_trace(go.Bar(
x=x_exact,
y=exact_wait,
name='Waiting Time',
marker_color='blue',
showlegend=False  # legend already shown for waiting time above
))
fig.add_trace(go.Bar(
x=x_exact,
y=exact_over,
name='Overtime',
marker_color='red',
showlegend=False  # legend already shown for overtime above
))
# Update layout to achieve grouped stacked bars
fig.update_layout(
title="Comparison of Simulation vs. Exact Results",
xaxis_title="Schedule Type",
yaxis_title="Time",
barmode='stack'
)
fig.show()
reticulate::repl_python()
