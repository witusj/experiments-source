sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
else:
# Patients are scheduled in this time slot
wt_temp = [sp.copy()]  # JB: The switch from st to wt here is a bit confusing to me.
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(1, x):
# The waiting time distribution for the ith patient is the convolution
# of the previous patient's waiting time with s (adjusted service time distribution)
conv_s = convolutions.get(1)  # Adjusted service time distribution  JB: If I am not mistaken, you only get the first convolution result, and not all the others?
wt = np.convolve(wt_temp[i - 1], conv_s)
wt_temp.append(wt)
ewt += np.dot(range(len(wt)), wt)  # JB: I am wondering if this is needed, based upon the ewt of the first patient in interval t, the expectations of the other patients in the interval is easy right?
# Update sp for the next time slot
conv_s = convolutions.get(1)  # Adjusted service time distribution
sp = np.convolve(wt_temp[-1], conv_s)
# Adjust sp for duration d  JB: See also the above. Furthermore, I think a dedicated function would be useful that calculates max(X-d, 0) for a random variable X with given PMF p and integer d.
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
# Expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def calculate_objective(schedule: List[int], s: List[float], d: int, q: float) -> Tuple[float, float]:
"""
Calculate the objective value based on the given schedule and parameters.
This function adjusts the service times distribution for no-shows, calculates
the waiting times for all patients in the schedule, sums the expected
waiting times, and calculates the spillover time for the last interval (overtime).
Parameters:
schedule (List[int]): A list representing the number of patients scheduled in each time slot.
s (List[float]): Service times probability distribution.
d (int): Duration threshold or maximum allowed service time per slot.
q (float): No-show probability.
Returns:
Tuple[float, float]:
- ewt (float): The sum of expected waiting times.
- esp (float): The expected spillover time (overtime).
"""
# Adjust the service time distribution for no-shows
s = service_time_with_no_shows(s, q)
# Initialize the service process (probability distribution of waiting times)
sp = np.array([1], dtype=np.float64)
wt_list = []
ewt = 0  # Expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
wt_temp = [np.array(sp)]
wt_list.append([])
sp = []
sp.append(np.sum(wt_temp[-1][:d + 1]))
sp.extend(wt_temp[-1][d + 1:])
else:
# Patients are scheduled in this time slot
wt_temp = [np.array(sp)]
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(x - 1):
# Convolve the waiting time with the service time distribution
wt = np.convolve(wt_temp[i], s)
wt_temp.append(wt)
# Add expected waiting time
ewt += np.dot(range(len(wt)), wt)
wt_list.append(wt_temp)
# Update the service process for the next time slot
sp = []
convolved = np.convolve(wt_temp[-1], s)
sp.append(np.sum(convolved[:d + 1]))
sp.extend(convolved[d + 1:])
# Calculate expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
# JB: I highly recommend to also just write a discrete event simulation to compare the results also with that. Didn't you do that already? It is a good way to verify the correctness of the code.
def test_calculate_objective_serv_time_lookup_with_timing():
"""
Test the calculate_objective_serv_time_lookup function by comparing its outputs
and execution time with the original calculate_objective function.
The test verifies that both functions produce the same expected waiting time (ewt)
and expected spillover time (esp) for a sample schedule and parameters, and compares
their execution times.
"""
# Sample service time distribution (probabilities)
s = [0., 0.00599585, 0.00644478, 0.02427306, 0.04753406, 0.07355202, 0.16864656, 0.12338866, 0.10182152, 0.09778246, 0.07283463, 0.05794873, 0.05378825, 0.04945164, 0.04805953, 0.02797309, 0.02179657, 0.0183278, 0.0003808 ]
# Normalize the service time distribution to sum to 1
total_prob = sum(s)
s = [prob / total_prob for prob in s]
# Sample schedule: Number of patients scheduled in each time slot
schedule = [0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
# Parameters
d = 5       # Duration threshold or maximum allowed service time per slot
q = 0.1      # No-show probability
# Precompute convolutions for the maximum number of patients in any time slot
N = max(schedule)
convolutions = compute_convolutions(s, N, q)
# Measure execution time for the original function
start_time_original = time.time()
ewt_original, esp_original = calculate_objective(schedule, s, d, q)
end_time_original = time.time()
time_original = end_time_original - start_time_original
# Measure execution time for the lookup function
start_time_lookup = time.time()
ewt_lookup, esp_lookup = calculate_objective_serv_time_lookup(schedule, d, q, convolutions)
end_time_lookup = time.time()
time_lookup = end_time_lookup - start_time_lookup
# Define a tolerance for floating-point comparisons
tolerance = 1e-6
# Check if the expected waiting times are approximately equal
ewt_match = abs(ewt_original - ewt_lookup) < tolerance
# Check if the expected spillover times are approximately equal
esp_match = abs(esp_original - esp_lookup) < tolerance
# Print the results
print("Original Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_original}")
print(f"Expected Spillover Time (esp): {esp_original}")
print(f"Execution Time: {time_original:.6f} seconds\n")
print("Lookup Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_lookup}")
print(f"Expected Spillover Time (esp): {esp_lookup}")
print(f"Execution Time: {time_lookup:.6f} seconds\n")
# Assert that both outputs match within the defined tolerance
assert ewt_match, "Expected Waiting Times do not match."
assert esp_match, "Expected Spillover Times do not match."
print("Test passed: The outputs of both functions match within the defined tolerance.")
# Compare execution times
if time_lookup > 0:
speedup = time_original / time_lookup
print(f"The lookup function is {speedup:.2f} times faster than the original function.")
else:
print("Execution time for the lookup function is too small to measure speedup.")
# Run the test function
test_calculate_objective_serv_time_lookup_with_timing()
def calculate_objective_serv_time_lookup(schedule: List[int], d: int, q: float, convolutions: dict) -> Tuple[float, float]:
sp = np.array([1], dtype=np.float64)  # Initial service process (no waiting time). JB: What does this represent? WTH: The porbability that the waiting (spillover) time is zero equals 1 at the start of the schedule.
ewt = 0  # Total expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
# Adjust sp for the duration d (service process moves ahead)
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
else:
# Patients are scheduled in this time slot
wt_temp = [sp.copy()]  # JB: The switch from st to wt here is a bit confusing to me.
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(1, x):
# The waiting time distribution for the ith patient is the convolution
# of the previous patient's waiting time with s (adjusted service time distribution)
conv_s = convolutions.get(1)  # Adjusted service time distribution  JB: If I am not mistaken, you only get the first convolution result, and not all the others?
wt = np.convolve(wt_temp[i - 1], conv_s)
wt_temp.append(wt)
ewt += np.dot(range(len(wt)), wt)  # JB: I am wondering if this is needed, based upon the ewt of the first patient in interval t, the expectations of the other patients in the interval is easy right?
# Update sp for the next time slot
conv_s = convolutions.get(1)  # Adjusted service time distribution
sp = np.convolve(wt_temp[-1], conv_s)
# Adjust sp for duration d  JB: See also the above. Furthermore, I think a dedicated function would be useful that calculates max(X-d, 0) for a random variable X with given PMF p and integer d.
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
# Expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def calculate_objective(schedule: List[int], s: List[float], d: int, q: float) -> Tuple[float, float]:
# Adjust the service time distribution for no-shows
s = service_time_with_no_shows(s, q)
# Initialize the service process (probability distribution of waiting times)
sp = np.array([1], dtype=np.float64)
wt_list = []
ewt = 0  # Expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
wt_temp = [np.array(sp)]
wt_list.append([])
sp = []
sp.append(np.sum(wt_temp[-1][:d + 1]))
sp.extend(wt_temp[-1][d + 1:])
else:
# Patients are scheduled in this time slot
wt_temp = [np.array(sp)]
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(x - 1):
# Convolve the waiting time with the service time distribution
wt = np.convolve(wt_temp[i], s)
wt_temp.append(wt)
# Add expected waiting time
ewt += np.dot(range(len(wt)), wt)
wt_list.append(wt_temp)
# Update the service process for the next time slot
sp = []
convolved = np.convolve(wt_temp[-1], s)
sp.append(np.sum(convolved[:d + 1]))
sp.extend(convolved[d + 1:])
# Calculate expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def test_calculate_objective_serv_time_lookup_with_timing():
"""
Test the calculate_objective_serv_time_lookup function by comparing its outputs
and execution time with the original calculate_objective function.
The test verifies that both functions produce the same expected waiting time (ewt)
and expected spillover time (esp) for a sample schedule and parameters, and compares
their execution times.
"""
# Sample service time distribution (probabilities)
s = [0., 0.00599585, 0.00644478, 0.02427306, 0.04753406, 0.07355202, 0.16864656, 0.12338866, 0.10182152, 0.09778246, 0.07283463, 0.05794873, 0.05378825, 0.04945164, 0.04805953, 0.02797309, 0.02179657, 0.0183278, 0.0003808 ]
# Normalize the service time distribution to sum to 1
total_prob = sum(s)
s = [prob / total_prob for prob in s]
# Sample schedule: Number of patients scheduled in each time slot
schedule = [0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
# Parameters
d = 5       # Duration threshold or maximum allowed service time per slot
q = 0.1      # No-show probability
# Precompute convolutions for the maximum number of patients in any time slot
N = max(schedule)
convolutions = compute_convolutions(s, N, q)
# Measure execution time for the original function
start_time_original = time.time()
ewt_original, esp_original = calculate_objective(schedule, s, d, q)
end_time_original = time.time()
time_original = end_time_original - start_time_original
# Measure execution time for the lookup function
start_time_lookup = time.time()
ewt_lookup, esp_lookup = calculate_objective_serv_time_lookup(schedule, d, q, convolutions)
end_time_lookup = time.time()
time_lookup = end_time_lookup - start_time_lookup
# Define a tolerance for floating-point comparisons
tolerance = 1e-6
# Check if the expected waiting times are approximately equal
ewt_match = abs(ewt_original - ewt_lookup) < tolerance
# Check if the expected spillover times are approximately equal
esp_match = abs(esp_original - esp_lookup) < tolerance
# Print the results
print("Original Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_original}")
print(f"Expected Spillover Time (esp): {esp_original}")
print(f"Execution Time: {time_original:.6f} seconds\n")
print("Lookup Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_lookup}")
print(f"Expected Spillover Time (esp): {esp_lookup}")
print(f"Execution Time: {time_lookup:.6f} seconds\n")
# Assert that both outputs match within the defined tolerance
assert ewt_match, "Expected Waiting Times do not match."
assert esp_match, "Expected Spillover Times do not match."
print("Test passed: The outputs of both functions match within the defined tolerance.")
# Compare execution times
if time_lookup > 0:
speedup = time_original / time_lookup
print(f"The lookup function is {speedup:.2f} times faster than the original function.")
else:
print("Execution time for the lookup function is too small to measure speedup.")
# Run the test function
test_calculate_objective_serv_time_lookup_with_timing()
def calculate_objective_serv_time_lookup(schedule: List[int], d: int, q: float, convolutions: dict) -> Tuple[float, float]:
sp = np.array([1], dtype=np.float64)
ewt = 0  # Total expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
# Adjust sp for the duration d (service process moves ahead)
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
else:
# Patients are scheduled in this time slot
wt_temp = [sp.copy()]  # JB: The switch from st to wt here is a bit confusing to me.
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(1, x):
# The waiting time distribution for the ith patient is the convolution
# of the previous patient's waiting time with s (adjusted service time distribution)
conv_s = convolutions.get(1)  # Adjusted service time distribution  JB: If I am not mistaken, you only get the first convolution result, and not all the others?
wt = np.convolve(wt_temp[i - 1], conv_s)
wt_temp.append(wt)
ewt += np.dot(range(len(wt)), wt)  # JB: I am wondering if this is needed, based upon the ewt of the first patient in interval t, the expectations of the other patients in the interval is easy right?
# Update sp for the next time slot
conv_s = convolutions.get(1)  # Adjusted service time distribution
sp = np.convolve(wt_temp[-1], conv_s)
# Adjust sp for duration d  JB: See also the above. Furthermore, I think a dedicated function would be useful that calculates max(X-d, 0) for a random variable X with given PMF p and integer d.
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
# Expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def calculate_objective(schedule: List[int], s: List[float], d: int, q: float) -> Tuple[float, float]:
# Adjust the service time distribution for no-shows
s = service_time_with_no_shows(s, q)
# Initialize the service process (probability distribution of waiting times)
sp = np.array([1], dtype=np.float64)
wt_list = []
ewt = 0  # Expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
wt_temp = [np.array(sp)]
wt_list.append([])
sp = []
sp.append(np.sum(wt_temp[-1][:d + 1]))
sp.extend(wt_temp[-1][d + 1:])
else:
# Patients are scheduled in this time slot
wt_temp = [np.array(sp)]
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(x - 1):
# Convolve the waiting time with the service time distribution
wt = np.convolve(wt_temp[i], s)
wt_temp.append(wt)
# Add expected waiting time
ewt += np.dot(range(len(wt)), wt)
wt_list.append(wt_temp)
# Update the service process for the next time slot
sp = []
convolved = np.convolve(wt_temp[-1], s)
sp.append(np.sum(convolved[:d + 1]))
sp.extend(convolved[d + 1:])
# Calculate expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def test_calculate_objective_serv_time_lookup_with_timing():
# Sample service time distribution (probabilities)
s = [0., 0.00599585, 0.00644478, 0.02427306, 0.04753406, 0.07355202, 0.16864656, 0.12338866, 0.10182152, 0.09778246, 0.07283463, 0.05794873, 0.05378825, 0.04945164, 0.04805953, 0.02797309, 0.02179657, 0.0183278, 0.0003808 ]
# Normalize the service time distribution to sum to 1
total_prob = sum(s)
s = [prob / total_prob for prob in s]
# Sample schedule: Number of patients scheduled in each time slot
schedule = [0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
# Parameters
d = 5       # Duration threshold or maximum allowed service time per slot
q = 0.1      # No-show probability
# Precompute convolutions for the maximum number of patients in any time slot
N = max(schedule)
convolutions = compute_convolutions(s, N, q)
# Measure execution time for the original function
start_time_original = time.time()
ewt_original, esp_original = calculate_objective(schedule, s, d, q)
end_time_original = time.time()
time_original = end_time_original - start_time_original
# Measure execution time for the lookup function
start_time_lookup = time.time()
ewt_lookup, esp_lookup = calculate_objective_serv_time_lookup(schedule, d, q, convolutions)
end_time_lookup = time.time()
time_lookup = end_time_lookup - start_time_lookup
# Define a tolerance for floating-point comparisons
tolerance = 1e-6
# Check if the expected waiting times are approximately equal
ewt_match = abs(ewt_original - ewt_lookup) < tolerance
# Check if the expected spillover times are approximately equal
esp_match = abs(esp_original - esp_lookup) < tolerance
# Print the results
print("Original Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_original}")
print(f"Expected Spillover Time (esp): {esp_original}")
print(f"Execution Time: {time_original:.6f} seconds\n")
print("Lookup Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_lookup}")
print(f"Expected Spillover Time (esp): {esp_lookup}")
print(f"Execution Time: {time_lookup:.6f} seconds\n")
# Assert that both outputs match within the defined tolerance
assert ewt_match, "Expected Waiting Times do not match."
assert esp_match, "Expected Spillover Times do not match."
print("Test passed: The outputs of both functions match within the defined tolerance.")
# Compare execution times
if time_lookup > 0:
speedup = time_original / time_lookup
print(f"The lookup function is {speedup:.2f} times faster than the original function.")
else:
print("Execution time for the lookup function is too small to measure speedup.")
# Run the test function
test_calculate_objective_serv_time_lookup_with_timing()
def calculate_objective_serv_time_lookup(schedule: List[int], d: int, q: float, convolutions: dict) -> Tuple[float, float]:
sp = np.array([1], dtype=np.float64)  # Initial service process (no waiting time). JB: What does this represent? WTH: The porbability that the waiting (spillover) time is zero equals 1 at the start of the schedule.
ewt = 0  # Total expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
# Adjust sp for the duration d (service process moves ahead)
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
else:
# Patients are scheduled in this time slot
wt_temp = [sp.copy()]  # JB: The switch from st to wt here is a bit confusing to me.
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(1, x):
# The waiting time distribution for the ith patient is the convolution
# of the previous patient's waiting time with s (adjusted service time distribution)
conv_s = convolutions.get(1)  # Adjusted service time distribution  JB: If I am not mistaken, you only get the first convolution result, and not all the others?
wt = np.convolve(wt_temp[i - 1], conv_s)
wt_temp.append(wt)
ewt += np.dot(range(len(wt)), wt)  # JB: I am wondering if this is needed, based upon the ewt of the first patient in interval t, the expectations of the other patients in the interval is easy right?
# Update sp for the next time slot
conv_s = convolutions.get(1)  # Adjusted service time distribution
sp = np.convolve(wt_temp[-1], conv_s)
# Adjust sp for duration d  JB: See also the above. Furthermore, I think a dedicated function would be useful that calculates max(X-d, 0) for a random variable X with given PMF p and integer d.
sp_new = []
sp_new.append(np.sum(sp[:d + 1]))
sp_new.extend(sp[d + 1:])
sp = np.array(sp_new)
# Expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def calculate_objective(schedule: List[int], s: List[float], d: int, q: float) -> Tuple[float, float]:
# Adjust the service time distribution for no-shows
s = service_time_with_no_shows(s, q)
# Initialize the service process (probability distribution of waiting times)
sp = np.array([1], dtype=np.float64)
wt_list = []
ewt = 0  # Expected waiting time
for x in schedule:
if x == 0:
# No patients in this time slot
wt_temp = [np.array(sp)]
wt_list.append([])
sp = []
sp.append(np.sum(wt_temp[-1][:d + 1]))
sp.extend(wt_temp[-1][d + 1:])
else:
# Patients are scheduled in this time slot
wt_temp = [np.array(sp)]
# Add expected waiting time for the first patient
ewt += np.dot(range(len(sp)), sp)
# For each additional patient
for i in range(x - 1):
# Convolve the waiting time with the service time distribution
wt = np.convolve(wt_temp[i], s)
wt_temp.append(wt)
# Add expected waiting time
ewt += np.dot(range(len(wt)), wt)
wt_list.append(wt_temp)
# Update the service process for the next time slot
sp = []
convolved = np.convolve(wt_temp[-1], s)
sp.append(np.sum(convolved[:d + 1]))
sp.extend(convolved[d + 1:])
# Calculate expected spillover time
esp = np.dot(range(len(sp)), sp)
return ewt, esp
def test_calculate_objective_serv_time_lookup_with_timing():
# Sample service time distribution (probabilities)
s = [0., 0.00599585, 0.00644478, 0.02427306, 0.04753406, 0.07355202, 0.16864656, 0.12338866, 0.10182152, 0.09778246, 0.07283463, 0.05794873, 0.05378825, 0.04945164, 0.04805953, 0.02797309, 0.02179657, 0.0183278, 0.0003808 ]
# Normalize the service time distribution to sum to 1
total_prob = sum(s)
s = [prob / total_prob for prob in s]
# Sample schedule: Number of patients scheduled in each time slot
schedule = [0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
# Parameters
d = 5       # Duration threshold or maximum allowed service time per slot
q = 0.1      # No-show probability
# Precompute convolutions for the maximum number of patients in any time slot
N = max(schedule)
convolutions = compute_convolutions(s, N, q)
# Measure execution time for the original function
start_time_original = time.time()
ewt_original, esp_original = calculate_objective(schedule, s, d, q)
end_time_original = time.time()
time_original = end_time_original - start_time_original
# Measure execution time for the lookup function
start_time_lookup = time.time()
ewt_lookup, esp_lookup = calculate_objective_serv_time_lookup(schedule, d, q, convolutions)
end_time_lookup = time.time()
time_lookup = end_time_lookup - start_time_lookup
# Define a tolerance for floating-point comparisons
tolerance = 1e-6
# Check if the expected waiting times are approximately equal
ewt_match = abs(ewt_original - ewt_lookup) < tolerance
# Check if the expected spillover times are approximately equal
esp_match = abs(esp_original - esp_lookup) < tolerance
# Print the results
print("Original Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_original}")
print(f"Expected Spillover Time (esp): {esp_original}")
print(f"Execution Time: {time_original:.6f} seconds\n")
print("Lookup Function Output:")
print(f"Expected Waiting Time (ewt): {ewt_lookup}")
print(f"Expected Spillover Time (esp): {esp_lookup}")
print(f"Execution Time: {time_lookup:.6f} seconds\n")
# Assert that both outputs match within the defined tolerance
assert ewt_match, "Expected Waiting Times do not match."
assert esp_match, "Expected Spillover Times do not match."
print("Test passed: The outputs of both functions match within the defined tolerance.")
# Compare execution times
if time_lookup > 0:
speedup = time_original / time_lookup
print(f"The lookup function is {speedup:.2f} times faster than the original function.")
else:
print("Execution time for the lookup function is too small to measure speedup.")
# Run the test function
test_calculate_objective_serv_time_lookup_with_timing()
reticulate::repl_python()
