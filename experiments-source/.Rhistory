# Number of subplots needed
num_subplots = len(x_stars)
# Create a subplot figure with one chart per subplot
fig = sp.make_subplots(
rows=num_subplots,
cols=1,
shared_xaxes=True,
subplot_titles=[f'n = {n}' for n in N]
)
# Add each initial and optimized schedule to its respective subplot
for idx, (x_initial, x_star) in enumerate(zip(x_initials, x_stars)):
# Add initial schedule as a dotted line
fig.add_trace(
go.Scatter(
x=list(range(T)),
y=x_initial,
mode='lines',
name='Initial schedule' if idx == 0 else None,  # Show legend only once
line=dict(dash='dot', color='blue')
),
row=idx + 1,
col=1
)
# Add optimized schedule as a solid line with markers
fig.add_trace(
go.Scatter(
x=list(range(T)),
y=x_star,
mode='lines+markers',
name='Optimized schedule' if idx == 0 else None,  # Show legend only once
line=dict(color='red')
),
row=idx + 1,
col=1
)
# Update layout properties
fig.update_layout(
height=600 * num_subplots,  # Adjust height based on the number of subplots
title=dict(
text=f"Optimal schedules across different values of N\n(T={T}, w={w})",
x=0.5,  # Center the title horizontally
# y=0.95,  # Adjust the vertical position (closer to the top)
font=dict(size=20),  # Optional: Adjust title font size
pad=dict(b=50)  # Add padding at the top of the title
),
xaxis_title="Time slot (x)",
yaxis_title="# of patients (y)",
template="plotly_white",
showlegend=False  # Enable legend to distinguish between initial and optimized schedules
)
# Set consistent y-axis ticks for each subplot
for i in range(1, num_subplots + 1):
fig.update_yaxes(tickmode='linear', tick0=0, dtick=1, row=i, col=1)
# Optionally, adjust the legend position
fig.update_layout(legend=dict(
orientation="h",
yanchor="bottom",
y=1.02,
xanchor="right",
x=1
))
# Show the Plotly figure
fig.show()
import itertools
from joblib import Parallel, delayed
import networkx as nx
import plotly.graph_objects as go
import numpy as np
from typing import List, Tuple
import plotly.subplots as sp
from plotly.subplots import make_subplots
from concurrent.futures import ThreadPoolExecutor
import time
import math
from functions import create_random_schedules, calculate_objective, compute_convolutions, local_search, get_v_star, powerset, get_neighborhood, build_welch_bailey_schedule, service_time_with_no_shows, create_schedule_network, create_schedule_network_var_edges, create_schedule_network_from_lists, local_search_w_intermediates, build_quasi_optimal_schedule
# Parameters
N = range(16, 20)
T = 15
s = [0.0, 0.1, 0.15, 0.15, 0.15, 0.25, 0.2]  # Example service time probability distribution
d = 2  # Duration threshold
q = 0.1  # No-show probability
w = 0.1  # Weight for waiting time in the objective
v_star = get_v_star(T)
# Lists to store results
x_stars = []
x_initials = []  # To store initial schedules
obj_vals = []
schedules_list, objectives_list = [], []
# Iterate over each n in N
start = time.time()
for n in N:
print(f'Running local search for schedule with N={n}')
x = build_welch_bailey_schedule(n, T)
x_initials.append(x)  # Store the initial schedule
convolutions = compute_convolutions(s, n, q)
schedules, objectives = local_search_w_intermediates(x, d, convolutions, w, v_star, T)
#x_star, obj = local_search(x, d, q, convolutions, w, v_star, T)
obj_vals.append(objectives[-1])
x_stars.append(schedules[-1])
schedules_list.append(schedules)
objectives_list.append(objectives)
end = time.time()
print("Optimized schedules:", x_stars)
print("Objective values:", obj_vals)
print(f"Search time: {end - start:.2f} seconds")
# Number of subplots needed
num_subplots = len(x_stars)
# Create a subplot figure with one chart per subplot
fig = sp.make_subplots(
rows=num_subplots,
cols=1,
shared_xaxes=True,
subplot_titles=[f'n = {n}' for n in N]
)
# Add each initial and optimized schedule to its respective subplot
for idx, (x_initial, x_star) in enumerate(zip(x_initials, x_stars)):
# Add initial schedule as a dotted line
fig.add_trace(
go.Scatter(
x=list(range(T)),
y=x_initial,
mode='lines',
name='Initial schedule' if idx == 0 else None,  # Show legend only once
line=dict(dash='dot', color='blue')
),
row=idx + 1,
col=1
)
# Add optimized schedule as a solid line with markers
fig.add_trace(
go.Scatter(
x=list(range(T)),
y=x_star,
mode='lines+markers',
name='Optimized schedule' if idx == 0 else None,  # Show legend only once
line=dict(color='red')
),
row=idx + 1,
col=1
)
# Update layout properties
fig.update_layout(
height=600 * num_subplots,  # Adjust height based on the number of subplots
title=dict(
text=f"Optimal schedules across different values of N\n(T={T}, w={w})",
x=0.5,  # Center the title horizontally
# y=0.95,  # Adjust the vertical position (closer to the top)
font=dict(size=20),  # Optional: Adjust title font size
pad=dict(b=50)  # Add padding at the top of the title
),
xaxis_title="Time slot (x)",
yaxis_title="# of patients (y)",
template="plotly_white",
showlegend=False  # Enable legend to distinguish between initial and optimized schedules
)
# Set consistent y-axis ticks for each subplot
for i in range(1, num_subplots + 1):
fig.update_yaxes(tickmode='linear', tick0=0, dtick=1, row=i, col=1)
# Optionally, adjust the legend position
fig.update_layout(legend=dict(
orientation="h",
yanchor="bottom",
y=1.02,
xanchor="right",
x=1
))
# Show the Plotly figure
fig.show()
schedules_list
objectives_list
for schedules in schedules_list:
print(f'Start: {schedules[0]}, End: {schedules[-1]}')
for objectives in objectives_list:
print(f'Start: {objectives[0]}, End: {objectives[-1]}')
