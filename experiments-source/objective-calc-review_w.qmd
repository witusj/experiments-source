---
title: Setup and support functions
jupyter: python3
---

```{python}
import numpy as np
import time
from typing import List, Generator, Tuple, Dict
import pytest
import math

def service_time_with_no_shows(s: List[float], q: float) -> List[float]:
    """
    Adjusts service times to account for the probability of no-shows.

    This function modifies the original service times based on the probability `q` 
    that a customer does not show up. The first service time is further adjusted 
    by adding the no-show probability.

    Args:
        s (List[float]): A list of original service times.
        q (float): The probability of a no-show.

    Returns:
        List[float]: A list of adjusted service times accounting for no-shows.

    Raises:
        ValueError: If the input service times list `s` is empty.
    """
    if not s:
        raise ValueError("The service times list `s` cannot be empty.")

    s_adj = [(1 - q) * si for si in s]
    s_adj[0] += q
    return s_adj

from typing import List, Dict
import numpy as np

def compute_convolutions(probabilities: List[float], N: int, q: float = 0.0) -> Dict[int, np.ndarray]:
    """
    Computes convolution of service time probabilities up to order N.

    This function generates a dictionary of convoluted probability distributions 
    for service times from order 1 up to order N. It starts by adjusting the 
    initial service times for no-shows and then iteratively convolves the 
    probabilities to compute higher-order convolutions.

    Args:
        probabilities (List[float]): A list of service time probabilities.
        N (int): The maximum order of convolution to compute.
        q (float, optional): The probability of a no-show. Defaults to 0.0.

    Returns:
        Dict[int, np.ndarray]: A dictionary where each key is an integer 
                                representing the convolution order, and the 
                                value is a NumPy array of the convoluted 
                                probabilities for that order.

    Raises:
        ValueError: If the input probabilities list is empty.
    """
    if not probabilities:
        raise ValueError("The probabilities list cannot be empty.")

    convolutions: Dict[int, np.ndarray] = {1: np.array(service_time_with_no_shows(probabilities, q))}
    for k in range(2, N + 1):
        convolutions[k] = np.convolve(convolutions[k - 1], convolutions[1])
    return convolutions


def test_compute_convolutions():
    """
    Tests the compute_convolutions function to ensure that:
    1. The sum of probabilities in each convolution equals 1.
    2. The function correctly handles edge cases.
    """
    # Test Case 1: Standard Input
    probabilities: List[float] = [
        0.0, 0.00599585, 0.00644478, 0.02427306, 0.04753406, 
        0.07355202, 0.16864656, 0.12338866, 0.10182152, 0.09778246, 
        0.07283463, 0.05794873, 0.05378825, 0.04945164, 0.04805953, 
        0.02797309, 0.02179657, 0.0183278, 0.0003808
    ]
    N = 20
    q = 0.1
    convolutions: Dict[int, np.ndarray] = compute_convolutions(probabilities, N, q=q)

    # Validate that each convolution's probabilities sum to 1 within a tolerance
    for k in range(1, N + 1):
        conv_pmf = convolutions.get(k)
        assert conv_pmf is not None, f"Convolution for k={k} is missing."
        total_prob = np.sum(conv_pmf)
        assert np.isclose(total_prob, 1.0, atol=1e-6), (
            f"Total probability at k={k} does not sum to 1. "
            f"Sum: {total_prob}"
        )

    # Test Case 2: Edge Case with q=0 (No No-Shows)
    q_zero = 0.0
    convolutions_zero_q = compute_convolutions(probabilities, N, q=q_zero)
    for k in range(1, N + 1):
        conv_pmf_zero = convolutions_zero_q.get(k)
        assert conv_pmf_zero is not None, f"Convolution for k={k} is missing."
        total_prob_zero = np.sum(conv_pmf_zero)
        assert np.isclose(total_prob_zero, 1.0, atol=1e-6), (
            f"Total probability at k={k} with q=0 does not sum to 1. "
            f"Sum: {total_prob_zero}"
        )

    # Test Case 3: Edge Case with q=1 (All No-Shows)
    q_one = 1.0
    convolutions_one_q = compute_convolutions(probabilities, N, q=q_one)
    for k in range(1, N + 1):
        conv_pmf_one = convolutions_one_q.get(k)
        assert conv_pmf_one is not None, f"Convolution for k={k} is missing."
        total_prob_one = np.sum(conv_pmf_one)
        assert np.isclose(total_prob_one, 1.0, atol=1e-6), (
            f"Total probability at k={k} with q=1 does not sum to 1. "
            f"Sum: {total_prob_one}"
        )

    # Test Case 4: Edge Case with Empty Probabilities
    empty_probabilities: List[float] = []
    N_empty = 5
    with pytest.raises(ValueError, match="The probabilities list cannot be empty."):
        compute_convolutions(empty_probabilities, N_empty, q=0.1)

    # If all assertions pass
    assert True  # Placeholder to indicate test completion

# Run the test function
test_compute_convolutions()
```

## Tests for functions for calculating objective values

The difference between `calculate_objective_serv_time_lookup` and `calculate_objective` is that the former looks up pre-calculated convolutions of service times (adjusted for no-shows) from a numpy array, while the latter must calculates the convolutions for every single interval seperately.

The test verifies whether both functions return the same results and measure the difference in execution times.

```{python}
def service_time_with_no_shows(s: List[float], q: float) -> List[float]:
    """
    Adjust the service time distribution to account for no-show probability.

    The original service time distribution is adjusted so that the first "slot"
    accounts for a no-show probability `q`. Essentially, we shift some probability 
    mass to represent that sometimes no actual service occurs (no-show), and 
    reduce the probability mass of other service times accordingly.

    Args:
        s (List[float]): Original service time probability distribution.
        q (float): Probability of no-show.

    Returns:
        List[float]: Adjusted service time distribution that accounts for no-shows.
    """
    s_adj = [(1 - q) * si for si in s]
    s_adj[0] += q
    return s_adj


def compute_convolutions(probabilities: List[float], N: int, q: float = 0.0) -> Dict[int, np.ndarray]:
    """
    Compute convolutions of a service time distribution up to order N.

    This function generates a dictionary of probability distributions representing
    the waiting times after convolving the service time distribution multiple times.
    For example, the first convolution is just the adjusted service time distribution,
    and subsequent convolutions represent the waiting time distribution if multiple 
    patients are served sequentially.

    Args:
        probabilities (List[float]): Base service time probability distribution.
        N (int): The maximum convolution order to compute.
        q (float, optional): Probability of no-shows. Defaults to 0.0.

    Returns:
        Dict[int, np.ndarray]: A dictionary where keys are convolution orders (1 through N),
                               and values are the corresponding probability distributions.
    """
    # Adjust for no-shows first
    base_dist = np.array(service_time_with_no_shows(probabilities, q))
    convolutions = {1: base_dist}
    for k in range(2, N + 1):
        # Each convolution represents adding another "patient" and waiting period
        convolutions[k] = np.convolve(convolutions[k - 1], base_dist)
    return convolutions


def calculate_objective_serv_time_lookup(schedule: List[int], d: int, convolutions: Dict[int, np.ndarray]) -> Tuple[float, float]:
    """
    Calculate the expected waiting time (ewt) and expected spillover time (esp) using 
    a precomputed set of convolutions for the service time distribution.

    This function simulates the progression of a schedule of patients through 
    service times, using a "lookup" approach where convolution results for multiple 
    patients are precomputed. By doing so, it avoids recomputing convolutions 
    repeatedly within the loop, potentially improving performance.

    Args:
        schedule (List[int]): List indicating how many patients are scheduled in each timeslot.
        d (int): Duration threshold to which the waiting time distribution is truncated or shifted.
        convolutions (Dict[int, np.ndarray]): Precomputed convolutions for service times up to max patients in a slot.

    Returns:
        Tuple[float, float]: 
            - ewt (float): Expected waiting time of all patients in the given schedule.
            - esp (float): Expected spillover time, i.e., how much waiting time 
                           extends beyond the last timeslot.
    """
    # Initial service process distribution: no waiting at the start (prob=1 at wait=0)
    sp = np.array([1], dtype=np.float64)
    ewt = 0.0  # Total expected waiting time

    for x in schedule:
        if x == 0:
            # No patients in this timeslot: the waiting time distribution 
            # moves forward in time by 'd' units.
            sp_new = []
            # The probability of waiting times up to d shifts into one lumped probability
            # (like "catching up" after a gap with no patients).
            sp_new.append(np.sum(sp[:d + 1]))
            # The remainder of the distribution shifts accordingly
            sp_new.extend(sp[d + 1:])
            sp = np.array(sp_new)
        else:
            # Patients are scheduled in this timeslot.
            # wt_temp will hold the waiting time distributions after each patient.
            wt_temp = [sp.copy()]

            # Add expected waiting time for the first patient
            ewt += np.dot(range(len(sp)), sp)

            # For each additional patient beyond the first
            for i in range(1, x):
                # Get the adjusted service time distribution (usually the first order convolution)
                conv_s = convolutions.get(1)
                # Convolve the previous waiting distribution with the service distribution
                wt = np.convolve(wt_temp[i - 1], conv_s)
                wt_temp.append(wt)

                # Add the expected waiting time for this additional patient
                ewt += np.dot(range(len(wt)), wt)

            # After serving x patients in this slot, update the service process (sp)
            # for the next timeslot using the last patient's waiting time distribution.
            conv_s = convolutions.get(1)
            sp = np.convolve(wt_temp[-1], conv_s)

            # Adjust sp for the duration d, similarly to the no-patient case
            sp_new = []
            sp_new.append(np.sum(sp[:d + 1]))
            sp_new.extend(sp[d + 1:])
            sp = np.array(sp_new)

    # The expected spillover time is the expectation of the final waiting time distribution (sp)
    esp = np.dot(range(len(sp)), sp)
    return ewt, esp


def calculate_objective(schedule: List[int], s: List[float], d: int, q: float) -> Tuple[float, float]:
    """
    Calculate the expected waiting time (ewt) and expected spillover time (esp) without precomputed convolutions.

    This function directly computes the waiting time distributions by convolving 
    the service time distribution for each patient in each timeslot. This can be 
    more computationally expensive compared to using a lookup approach.

    Args:
        schedule (List[int]): List indicating how many patients are scheduled in each timeslot.
        s (List[float]): Base service time probability distribution.
        d (int): Duration threshold for the service process distribution.
        q (float): Probability of no-shows.

    Returns:
        Tuple[float, float]:
            - ewt (float): Total expected waiting time across all patients.
            - esp (float): Expected spillover time.
    """
    # Adjust the service time distribution for no-shows
    s = service_time_with_no_shows(s, q)

    # Initial waiting time distribution (no waiting at start)
    sp = np.array([1], dtype=np.float64)
    wt_list = []
    ewt = 0.0

    for x in schedule:
        if x == 0:
            # No patients in this time slot, so the distribution just advances by d
            wt_temp = [np.array(sp)]
            wt_list.append([])
            sp = []
            sp.append(np.sum(wt_temp[-1][:d + 1]))
            sp.extend(wt_temp[-1][d + 1:])
        else:
            # Patients are present in this time slot
            wt_temp = [np.array(sp)]
            # Expected waiting time for the first patient in this slot
            ewt += np.dot(range(len(sp)), sp)

            # For each subsequent patient in this slot
            for i in range(x - 1):
                wt = np.convolve(wt_temp[i], s)
                wt_temp.append(wt)
                ewt += np.dot(range(len(wt)), wt)

            wt_list.append(wt_temp)
            # Update the service process for next slot
            convolved = np.convolve(wt_temp[-1], s)
            sp = []
            sp.append(np.sum(convolved[:d + 1]))
            sp.extend(convolved[d + 1:])

        # Calculate expected spillover time after handling this slot
        esp = np.dot(range(len(sp)), sp)

    return ewt, esp

def calculate_objective_exp_vals(schedule: List[int], d: int, convolutions: Dict[int, np.ndarray]) -> Tuple[float, float]:
    """
    Calculate the expected waiting time (ewt) and expected spillover time (esp) using 
    a precomputed set of convolutions for the service time distribution.

    This function simulates the progression of a schedule of patients through 
    service times, using a "lookup" approach where convolution results for multiple 
    patients are precomputed. By doing so, it avoids recomputing convolutions 
    repeatedly within the loop, potentially improving performance.

    Args:
        schedule (List[int]): List indicating how many patients are scheduled in each timeslot.
        d (int): Duration threshold to which the waiting time distribution is truncated or shifted.
        convolutions (Dict[int, np.ndarray]): Precomputed convolutions for service times up to max patients in a slot.

    Returns:
        Tuple[float, float]: 
            - ewt (float): Expected waiting time of all patients in the given schedule.
            - esp (float): Expected spillover time at end of schedule, i.e., how much work time 
                           extends beyond the last timeslot = overtime.
    """
    
    # Adjust s for no-shows
    s = convolutions.get(1)
    
    # Initial service process distribution: no waiting at the start (prob=1 at wait=0)
    
    es = np.dot(range(len(s)), s) # Expected value of service time
    sp = np.array([1], dtype=np.float64)
    esp = np.dot(range(len(sp)), sp) # Expected spillover time. Initially 0*100% = 0
    ewt = 0.0  # Total expected waiting time. Initially equal to esp = 0
    
    # Loop over each interval in schedule
    for x in schedule:
      # Case: zero patients in interval
      # There is no waiting time and the spillover time distribution is adjusted for the length of the interval
      if x == 0:
        work = sp # Total amount of work in interval equals spillover
        sp = [] # Reset en calculate spillover time distribution
        sp.append(np.sum(work[:d + 1]))
        sp.extend(work[d + 1:])
        esp = np.dot(range(len(sp)), sp) # Calculate expected spillover time
        
      # Case: x = schedule[t] patients in interval
      # The first patient has to wait until any spillover time has passed. The waiting time of the next patient is the total waiting time of the previous patient plus one service time.
      else:
        ewt += x * esp + math.comb(x, 2) * es # Expected total waiting time for all patients in interval
        work = np.convolve(sp, convolutions.get(x)) # Calculate distribution total amount of work in interval
        sp = [] # Reset en calculate spillover time distribution
        sp.append(np.sum(work[:d + 1]))
        sp.extend(work[d + 1:])
        esp = np.dot(range(len(sp)), sp) # Calculate expected spillover time
    
    return ewt, esp
  
def test_calculate_objective_serv_time_lookup_with_timing():
    """
    Test and compare the performance and accuracy of the original `calculate_objective` function 
    versus the `calculate_objective_serv_time_lookup` function which uses precomputed convolutions.

    This test:
    - Constructs a sample schedule and service time distribution.
    - Computes no-show adjusted service times.
    - Precomputes convolutions for the maximum number of patients.
    - Measures execution time for both the original and the lookup-based approach.
    - Verifies that both approaches produce approximately the same expected waiting time (ewt) 
      and expected spillover time (esp).
    - Reports the performance speedup of the lookup-based approach compared to the original.

    Raises:
        AssertionError: If the expected waiting times or expected spillover times do not match 
                        within a defined tolerance.
    """
    # Sample service time distribution (probabilities)
    s = [0., 0.00599585, 0.00644478, 0.02427306, 0.04753406, 0.07355202, 0.16864656, 
         0.12338866, 0.10182152, 0.09778246, 0.07283463, 0.05794873, 0.05378825, 
         0.04945164, 0.04805953, 0.02797309, 0.02179657, 0.0183278, 0.0003808]

    # Normalize the service time distribution
    total_prob = sum(s)
    s = [prob / total_prob for prob in s]

    # Sample schedule: Number of patients scheduled in each time slot
    schedule = [0, 2, 3, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

    # Parameters
    d = 5       # Duration threshold
    q = 0.1     # No-show probability

    # Precompute convolutions
    N = max(schedule)
    convolutions = compute_convolutions(s, N, q)

    # Measure execution time for the original function
    start_time_original = time.time()
    ewt_original, esp_original = calculate_objective(schedule, s, d, q)
    time_original = time.time() - start_time_original

    # Measure execution time for the lookup function
    start_time_lookup = time.time()
    ewt_lookup, esp_lookup = calculate_objective_serv_time_lookup(schedule, d, convolutions)
    time_lookup = time.time() - start_time_lookup
    
    # Measure execution time for the expected values function
    start_time_exp_vals = time.time()
    ewt_exp_vals, esp_exp_vals = calculate_objective_exp_vals(schedule, d, convolutions)
    time_exp_vals = time.time() - start_time_exp_vals

    # Define a tolerance for floating-point comparisons
    tolerance = 1e-6

    # Check approximate equality of results
    ewt_match = abs(ewt_original - ewt_lookup) < tolerance
    esp_match = abs(esp_original - esp_lookup) < tolerance

    # Print the results
    print("Original Function Output:")
    print(f"Expected Waiting Time (ewt): {ewt_original}")
    print(f"Expected Spillover Time (esp): {esp_original}")
    print(f"Execution Time: {time_original:.6f} seconds\n")

    print("Lookup Function Output:")
    print(f"Expected Waiting Time (ewt): {ewt_lookup}")
    print(f"Expected Spillover Time (esp): {esp_lookup}")
    print(f"Execution Time: {time_lookup:.6f} seconds\n")
    
    print("Expected Values Function Output:")
    print(f"Expected Waiting Time (ewt): {ewt_exp_vals}")
    print(f"Expected Spillover Time (esp): {esp_exp_vals}")
    print(f"Execution Time: {time_exp_vals:.6f} seconds\n")

    # Assert that both outputs match within the defined tolerance
    assert ewt_match, "Expected Waiting Times do not match."
    assert esp_match, "Expected Spillover Times do not match."

    print("Test passed: The outputs of both functions match within the defined tolerance.")

    # Compare execution times for a basic performance measure
    if time_lookup > 0:
        speedup = time_original / time_lookup
        print(f"The lookup function is {speedup:.2f} times faster than the original function.")
    else:
        print("Execution time for the lookup function is too small to measure speedup.")


# Run the test function
test_calculate_objective_serv_time_lookup_with_timing()
```
