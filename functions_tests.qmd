---
title: "Functions tests"
jupyter: python3
---

```{python}
import random
import math
import numpy as np
from itertools import combinations

def get_v_star(T):
    # Create an initial vector 'u' of zeros with length 'T'
    u = np.zeros(T)
    # Set the first element of vector 'u' to -1 and the last element to 1
    u[0] = -1
    u[-1] = 1
    # Initialize the list 'v_star' with the initial vector 'u'
    v_star = [u.copy()]
    
    # Loop over the length of 'u' minus one times to generate shifted versions of 'u'
    for i in range(T - 1):
        # Rotate 'u' by moving the last element to the front
        u = np.roll(u, 1)
        # Append the updated vector 'u' to the list 'v_star'
        v_star.append(u.copy())
    
    # Return 'v_star' as a list of lists, which is easier to process in the main function
    return np.array(v_star)

def create_neighbors_list(s: list[int]) -> (list[int], list[int]):
    """
    Create a set of pairs of schedules that are from the same neighborhood.
    
    Parameters:
      s (list[int]): A list of integers with |s| = T and sum N.
      
    Returns:
      tuple(list[int], list[int]): A pair of schedules.
    """
    # Create a set of vectors of length T
    v_star = get_v_star(len(s))
    
    # Choose a random element of t with probability P(t = i) = C(T,i)/((2^T)-2) for i in [1, ..., T-1]
    i = random.choices(range(1, len(s)), weights=[math.comb(len(s), i) for i in range(1, len(s))])[0]
    
    # Create a list l of all subsets of t with length i
    l = list(combinations(range(len(s)), i))
    
    # Choose a random element of l with probability 1/|l| and save it as j
    j = random.choice(l)
    
    # Select all elements of V* with index in j and save them as V_j
    # Sum the corresponding vectors in v_star
    v_j = [v_star[idx] for idx in j]  # Convert NumPy arrays to lists
    
    # Sum the elements of v_j and s and save as s_p
    s_p = s.copy()
    for v in v_j:
      s_p_temp = [int(x + y) for x, y in zip(s_p, v)]
      if np.all(np.array(s_p_temp) >= 0):
        s_p = s_p_temp
        
    return s, s_p

def test_create_neighbors_list():
    # Test case 1: Basic structure test (Length of s = 3)
    s = [1, 2, 1]
    s_original, s_p = create_neighbors_list(s)
    print(s_original, s_p)
    
    assert len(s_original) == len(s_p), "The two schedules must be of equal length"
    
    # Test case 2: Edge case with minimum length (Length of s = 2)
    s = [1, 1]
    s_original, s_p = create_neighbors_list(s)
    
    assert len(s_original) == len(s_p), "The two schedules must be of equal length for small inputs"
    assert sum(s_original) == sum(s_p), "The sum of elements should remain the same before and after the transformation"
    
    # Test case 3: Test for larger list and verify no mutation of original list
    s = [3, 2, 4, 1]
    s_original, s_p = create_neighbors_list(s)
    
    assert len(s_original) == len(s_p), "The schedules should have the same length"
    assert sum(s_original) == sum(s_p), "The sum should not change"
    assert s == s_original, "The original list should not be modified"
    
    # Test case 4: Test with all elements zero (edge case)
    s = [0, 0, 0, 0]
    s_original, s_p = create_neighbors_list(s)
    print(s_original, s_p)
    
    assert len(s_original) == len(s_p), "The schedules should have the same length"
    assert s_p == s_original, "If all elements are zero, the result should be identical"
    
    # Test case 5: Probabilistic test
    s = [1, 2, 3, 4]
    counts = [0] * len(s)  # Corrected length of counts
    for _ in range(1000):
        s_original, s_p = create_neighbors_list(s)
        diff = [x - y for x, y in zip(s_p, s_original)]
        
        # Check if -1 is in diff to avoid ValueError
        if -1 in diff:
            i = diff.index(-1)
            counts[i] += 1
        else:
            # If no -1 in diff, the schedules are identical; you might want to handle this case
            pass

    print("Probabilistic distribution for i (should reflect C(T,i)/((2^T)-2)): ", counts)

test_create_neighbors_list()


```
